-en el registro hacer nombres de usuarios random

-pensar en que es mejor halar los datos activos desde el backend y no estar clasificando en el fronted

-anadir en el guard una funcion que me permita cerrar la sesion si el estado y rol del 
token es diferente con los datos del mismo usuario recibidos por el backend ya que al momento 
de estar logueado en el usuario y por otra ventana se le cambia el rol no muestra bien la informa
por lo que cuando se le cambie el rol se le pediria que iniciara sesion

-al momento de desactivar un usuario que el login no le permita ingresar al sistema, no otorgar token y que
se verifique la informacion del susuario que viene del backend con algun token que quieran ingresasr
esto puede ser en el componente global y que compruebe el activo con la funcion datosUsuario

-en unos controller quitar la contrasena que se trae del usuario

-trabajar en las versiones del sistema al finalizar

-en la tabla inicial corregir el metodo crud para que no jale todos los requerimientos creados, solo serian los que no esten en terminado o eliminado

-hacer rutas para traer solo datos activos

-hacer una ventana emergente para confirmar eliminacion de algo

-hacer que del backend se envien 5 registros para las tablas y no cargar todos los registros en el fronted

-en los view de requerimientos agregar que se mire la fecha de creacion



observaciones

-las variables deben ser iguales a como estan declaradas en la base de datos si no las funcionciones http no sabran cual dato es cual

-si el id no esta en el query no sera afectado aunque el modelo lo incluya
